// app/courses/[courseId]/page.tsx
'use client';

import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { useParams } from 'next/navigation'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ useParams ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á courseId
import { supabase } from '../../../utils/supabaseClient'; // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import styles from './course-reviews.module.css'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CSS Module

// Interfaces ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Supabase
interface CourseData {
  id: string;
  course_code: string;
  course_name: string;
  university_name: string; // ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô DB ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  faculty: string;         // ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô DB ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  credits: number;         // ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô DB ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  instructor: string;      // ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô DB ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
}

interface ReviewData {
  id: string;
  term: string;
  section_number: string | null;
  rating_overall: number;
  rating_difficulty: number | null;
  rating_teaching: number | null;
  rating_homework: number | null;
  tags: string[] | null;
  content: string; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å main_review_content ‡πÄ‡∏õ‡πá‡∏ô content
  tips_review_content: string | null;
  is_anonymous: boolean;
  created_at: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏° created_at
}

// ‡∏¢‡πâ‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô formatDate ‡πÅ‡∏•‡∏∞ calculateDaysAgo ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ô‡∏≠‡∏Å Component
// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô ReviewCard ‡πÅ‡∏•‡∏∞ CourseReviewsPage
const formatDate = (dateString: string) => {
  const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };
  return new Date(dateString).toLocaleDateString('th-TH', options);
};

const calculateDaysAgo = (dateString: string) => {
  const reviewDate = new Date(dateString);
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - reviewDate.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  if (diffDays === 0) return '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ';
  if (diffDays === 1) return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô';
  if (diffDays < 7) return `${diffDays} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
  if (diffDays < 30) return `${Math.floor(diffDays / 7)} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
  if (diffDays < 365) return `${Math.floor(diffDays / 30)} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
  return `${Math.floor(diffDays / 365)} ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
};


// ReviewCard Component
const ReviewCard = ({ review }: { review: ReviewData }) => {
  const [helpfulCount, setHelpfulCount] = useState(24); // Mock data for helpful count
  const [notHelpfulCount, setNotHelpfulCount] = useState(2); // Mock data for not helpful count
  const [voted, setVoted] = useState(false); // State to prevent multiple votes

  const handleHelpfulClick = () => {
    if (!voted) {
      setHelpfulCount(prev => prev + 1);
      setVoted(true);
    }
  };

  const handleNotHelpfulClick = () => {
    if (!voted) {
      setNotHelpfulCount(prev => prev + 1);
      setVoted(true);
    }
  };

  const getRatingText = (rating: number | null, type: 'difficulty' | 'teaching' | 'homework') => {
    if (rating === null) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const labels: { [key: string]: string[] } = {
        difficulty: ['‡∏á‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å', '‡∏á‡πà‡∏≤‡∏¢', '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', '‡∏¢‡∏≤‡∏Å', '‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡∏Å'],
        teaching: ['‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å', '‡πÅ‡∏¢‡πà', '‡∏û‡∏≠‡πÉ‡∏ä‡πâ', '‡∏î‡∏µ', '‡∏î‡∏µ‡∏°‡∏≤‡∏Å'],
        homework: ['‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å', '‡∏ô‡πâ‡∏≠‡∏¢', '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', '‡πÄ‡∏¢‡∏≠‡∏∞', '‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å'],
    };
    return labels[type][rating - 1] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  };

  return (
    <div className={styles.reviewCard}>
      <div className={styles.reviewHeader}>
        <div className={styles.reviewerInfo}>
          <div className={styles.avatar}>
            {review.is_anonymous ? 'A' : (review.created_at ? review.created_at[0].toUpperCase() : 'U')}
          </div>
          <div className={styles.reviewerDetails}>
            {/* ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ */}
            <h4>{review.is_anonymous ? 'Anonymous Student' : `‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤`}</h4>
            <div className={styles.meta}>
              ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà {review.term} {review.section_number ? ` ‚Ä¢ ‡πÄ‡∏ã‡∏Ñ‡∏ä‡∏±‡πà‡∏ô: ${review.section_number}` : ''} ‚Ä¢ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠: {calculateDaysAgo(review.created_at)}
            </div>
          </div>
        </div>
        <div className={styles.reviewRating}>
          <span className={styles.stars}>{'‚òÖ'.repeat(Math.floor(review.rating_overall))}</span>
          <span>{review.rating_overall.toFixed(1)}</span>
        </div>
      </div>

      <div className={styles.reviewContent}>
        {review.tags && review.tags.length > 0 && (
          <div className={styles.reviewCategories}>
            {review.tags.map(tag => (
              <span key={tag} className={styles.categoryTag}>{tag}</span>
            ))}
          </div>
        )}

        <p className={styles.reviewText}>
          {review.content}
          {review.tips_review_content && (
            <>
              <br /><br />
              <strong>‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</strong> {review.tips_review_content}
            </>
          )}
        </p>

        <div className={styles.reviewMetrics}>
          <div className={styles.metric}>
            <div className={styles.metricValue}>{review.rating_difficulty?.toFixed(1) || 'N/A'}</div>
            <div className={styles.metricLabel}>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å ({getRatingText(review.rating_difficulty, 'difficulty')})</div>
          </div>
          <div className={styles.metric}>
            <div className={styles.metricValue}>{review.rating_teaching?.toFixed(1) || 'N/A'}</div>
            <div className={styles.metricLabel}>‡∏Ñ‡∏£‡∏π‡∏™‡∏≠‡∏ô‡∏î‡∏µ ({getRatingText(review.rating_teaching, 'teaching')})</div>
          </div>
          <div className={styles.metric}>
            <div className={styles.metricValue}>{review.rating_homework?.toFixed(1) || 'N/A'}</div>
            <div className={styles.metricLabel}>‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô ({getRatingText(review.rating_homework, 'homework')})</div>
          </div>
          {/* ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° metric ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à */}
        </div>
      </div>

      <div className={styles.reviewActions}>
        <div className={styles.helpfulSection}>
          <span style={{ color: '#6b7280', fontSize: '14px' }}>‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÑ‡∏´‡∏°?</span>
          <button className={styles.helpfulBtn} onClick={handleHelpfulClick} disabled={voted}>
            üëç ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ({helpfulCount})
          </button>
          <button className={styles.helpfulBtn} onClick={handleNotHelpfulClick} disabled={voted}>
            üëé ‡πÑ‡∏°‡πà‡∏°‡∏µ ({notHelpfulCount})
          </button>
        </div>
        <button className={styles.helpfulBtn}>üö® ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</button>
      </div>
    </div>
  );
};


export default function CourseReviewsPage() {
  const params = useParams();
  const courseId = params.courseId as string; // ‡∏î‡∏∂‡∏á courseId ‡∏à‡∏≤‡∏Å URL
  const [course, setCourse] = useState<CourseData | null>(null);
  const [reviews, setReviews] = useState<ReviewData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [averageRating, setAverageRating] = useState(0);
  const [totalReviews, setTotalReviews] = useState(0);

  useEffect(() => {
    async function fetchData() {
      setLoading(true);
      setError(null);

      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤
        const { data: courseData, error: courseError } = await supabase
          .from('courses')
          .select('*')
          .eq('id', courseId)
          .single(); // ‡πÉ‡∏ä‡πâ .single() ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

        if (courseError) {
          throw new Error('Error fetching course info: ' + courseError.message);
        }
        if (!courseData) {
            throw new Error('Course not found.');
        }
        setCourse(courseData as CourseData);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ
        const { data: reviewsData, error: reviewsError } = await supabase
          .from('reviews')
          .select('*') // ‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á reviews
          .eq('course_id', courseId)
          .order('created_at', { ascending: false }); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

        if (reviewsError) {
          throw new Error('Error fetching reviews: ' + reviewsError.message);
        }
        
        const fetchedReviews = reviewsData as ReviewData[];
        setReviews(fetchedReviews);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡∏ß‡∏°
        if (fetchedReviews.length > 0) {
          const sumRating = fetchedReviews.reduce((sum, r) => sum + r.rating_overall, 0);
          setAverageRating(parseFloat((sumRating / fetchedReviews.length).toFixed(1)));
          setTotalReviews(fetchedReviews.length);
        } else {
          setAverageRating(0);
          setTotalReviews(0);
        }

      } catch (err: any) {
        console.error('Failed to fetch data:', err);
        setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      } finally {
        setLoading(false);
      }
    }

    if (courseId) {
      fetchData();
    }
  }, [courseId]); // ‡πÉ‡∏´‡πâ useEffect ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ courseId ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

  if (loading) {
    return (
      <div className={styles.bodyBackground}>
        <div className={styles.container}>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.bodyBackground}>
        <div className={styles.container}>
          <p style={{ color: 'red' }}>{error}</p>
          <Link href="/" className={styles.backBtn}>‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</Link>
        </div>
      </div>
    );
  }

  if (!course) {
    return (
      <div className={styles.bodyBackground}>
        <div className={styles.container}>
          <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ</p>
          <Link href="/" className={styles.backBtn}>‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</Link>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.bodyBackground}>
      <Head>
        <title>{course.course_name} - ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</title>
        <meta name="description" content={`‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ß‡∏¥‡∏ä‡∏≤ ${course.course_name}`} />
      </Head>

      <div className={styles.container}>
        <div className={styles.header}>
          <Link href="/" className={styles.backBtn}>‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</Link>
          <div className={styles.courseInfo}>
            <div className={styles.courseCode}>{course.course_code}</div>
            <h1 className={styles.courseTitle}>{course.course_name}</h1>
            <div className={styles.courseStats}>
              <div className={styles.statItem}>
                <div className={styles.ratingDisplay}>
                  <span className={styles.stars}>{'‚òÖ'.repeat(Math.floor(averageRating))}</span>
                  <span>{averageRating}/5.0</span>
                </div>
              </div>
              <div className={styles.statItem}>
                <span>üìù {totalReviews} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</span>
              </div>
              {/* <div className={styles.statItem}>
                <span>üë• {course.students || 0} ‡∏Ñ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</span>
              </div> */}
              <div className={styles.statItem}>
                <span>‚è±Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {reviews.length > 0 ? calculateDaysAgo(reviews[0].created_at) : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß'}</span>
              </div>
            </div>
          </div>
        </div>

        <div className={styles.content}>
          <div className={styles.filters}>
            {/* Filter buttons - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Filter ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï */}
            <button className={`${styles.filterBtn} ${styles.active}`}>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
            <button className={styles.filterBtn}>‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</button>
            <button className={styles.filterBtn}>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á</button>
            <button className={styles.filterBtn}>‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå</button>
            <button className={styles.filterBtn}>‡∏Ñ‡∏£‡∏π‡∏™‡∏≠‡∏ô‡∏î‡∏µ</button>
            <button className={styles.filterBtn}>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏¢‡∏≤‡∏Å</button>
            <button className={styles.filterBtn}>‡∏á‡∏≤‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞</button>
          </div>

          <div className={styles.reviewsSection}>
            {reviews.length === 0 ? (
              <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ!</p>
            ) : (
              reviews.map(review => (
                <ReviewCard key={review.id} review={review} />
              ))
            )}
          </div>

          {/* Load More button - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pagination ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï */}
          {reviews.length > 0 && (
            <div className={styles.loadMore}>
              <button className={styles.loadMoreBtn}>‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</button>
            </div>
          )}
        </div>
      </div>

      {/* Floating Add Review Button - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Link ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß */}
      <Link href="/review" className={styles.addReviewBtn} title="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß">
        +
      </Link>
    </div>
  );
}
